/*
 * TotalArmyBuilder.Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://github.com/OpenAPITools/openapi-generator
 *
 * OpenAPI generator version: 6.5.0-SNAPSHOT
 */


import http from "k6/http";
import { group, check, sleep } from "k6";


const BASE_URL = "http://localhost:5000";
// Sleep duration between successive requests.
// You might want to edit the value of this variable or remove calls to the sleep function on the script.
const SLEEP_DURATION = 0.1;
// Global variables should be initialized.

export default function() {
    group("/api/Compositions/{id}/units", () => {
        let id = '1'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1
        {
            let url = BASE_URL + `/api/Compositions/${id}/units`;
            let request = http.get(url);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/api/Units/heroes", () => {

        // Request No. 1
        {
            let url = BASE_URL + `/api/Units/heroes`;
            let request = http.get(url);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/api/Compositions/{id}", () => {
        let id = '1'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1
        {
            let url = BASE_URL + `/api/Compositions/${id}`;
            let request = http.get(url);

            check(request, {
                "Success": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2
        {
            let url = BASE_URL + `/api/Compositions/${id}`;
            // TODO: edit the parameters of the request body.
            let body = {"name": "string", "battleType": "string", "factionId": "integer", "avatarId": "integer", "budget": "integer", "wins": "integer", "losses": "integer", "units": "list"};
            let params = {headers: {"Content-Type": "application/json-patch+json", "Accept": "application/json"}};
            let request = http.patch(url, JSON.stringify(body), params);

            check(request, {
                "Success": (r) => r.status === 204
            });
        }
    });

    group("/api/Compositions", () => {
        let battleTypeId = 'Land Battles'; // specify value as there is no example value for this parameter in OpenAPI spec
        let name = 'Ice Guard Box'; // specify value as there is no example value for this parameter in OpenAPI spec
        let factionId = '11'; // specify value as there is no example value for this parameter in OpenAPI spec
        let budget = '8000'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1
        {
            let url = BASE_URL + `/api/Compositions?name=${name}&battleTypeId=${battleTypeId}&factionId=${factionId}&budget=${budget}`;
            let request = http.get(url);

            check(request, {
                "Success": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2
        {
            let url = BASE_URL + `/api/Compositions`;
            // TODO: edit the parameters of the request body.
            let body = {"id": "integer", "name": "string", "battleType": "string", "factionId": "integer", "avatarId": "integer", "budget": "integer", "dateCreated": "date", "wins": "integer", "losses": "integer", "units": "list"};
            let params = {headers: {"Content-Type": "application/json-patch+json", "Accept": "application/json"}};
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "Success": (r) => r.status === 201
            });
        }
    });

    group("/api/Factions/{id}", () => {
        let id = '1'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1
        {
            let url = BASE_URL + `/api/Factions/${id}`;
            let request = http.get(url);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/api/Units/{id}", () => {
        let id = '1'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1
        {
            let url = BASE_URL + `/api/Units/${id}`;
            let request = http.get(url);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/api/Factions", () => {
        let name = 'Beastmen'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1
        {
            let url = BASE_URL + `/api/Factions?name=${name}`;
            let request = http.get(url);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/api/Authentication", () => {

        // Request No. 1
        {
            let url = BASE_URL + `/api/Authentication`;
            // TODO: edit the parameters of the request body.
            let body = {"email": "string", "password": "string"};
            let params = {headers: {"Content-Type": "application/json-patch+json", "Accept": "application/json"}};
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/api/Units/lords", () => {

        // Request No. 1
        {
            let url = BASE_URL + `/api/Units/lords`;
            let request = http.get(url);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/api/Factions/{id}/units", () => {
        let id = '7'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1
        {
            let url = BASE_URL + `/api/Factions/${id}/units`;
            let request = http.get(url);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/api/Units/{id}/factions", () => {
        let id = '1'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1
        {
            let url = BASE_URL + `/api/Units/${id}/factions`;
            let request = http.get(url);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/api/Accounts", () => {
        let email = 'username@example.com'; // specify value as there is no example value for this parameter in OpenAPI spec
        let username = 'username'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1
        {
            let url = BASE_URL + `/api/Accounts?username=${username}&email=${email}`;
            let request = http.get(url);

            check(request, {
                "Success": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2
        {
            let url = BASE_URL + `/api/Accounts`;
            // TODO: edit the parameters of the request body.
            let body = {"username": "string", "email": "string", "password": "string"};
            let params = {headers: {"Content-Type": "application/json-patch+json", "Accept": "application/json"}};
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "Success": (r) => r.status === 201
            });
        }
    });

    group("/api/Accounts/{id}/compositions", () => {
        let id = '1'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1
        {
            let url = BASE_URL + `/api/Accounts/${id}/compositions`;
            let request = http.get(url);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/api/Accounts/{id}", () => {
        let id = '1'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1
        {
            let url = BASE_URL + `/api/Accounts/${id}`;
            let request = http.get(url);

            check(request, {
                "Success": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2
        {
            let url = BASE_URL + `/api/Accounts/${id}`;
            // TODO: edit the parameters of the request body.
            let body = {"username": "string", "email": "string", "password": "string", "compositions": "list"};
            let params = {headers: {"Content-Type": "application/json-patch+json", "Accept": "application/json"}};
            let request = http.patch(url, JSON.stringify(body), params);

            check(request, {
                "Success": (r) => r.status === 204
            });
        }
    });

    group("/api/Units", () => {
        let cost = ''; // specify value as there is no example value for this parameter in OpenAPI spec
        let name = 'Tzar Guard'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1
        {
            let url = BASE_URL + `/api/Units?name=${name}&cost=${cost}`;
            let request = http.get(url);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

}
